Index: app/src/main/java/com/example/opsc7312part1/APICallService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.opsc7312part1\r\n\r\nimport android.Manifest\r\nimport android.app.Notification\r\nimport android.app.NotificationManager\r\nimport android.app.PendingIntent\r\nimport android.app.Service\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.os.Build\r\nimport android.os.IBinder\r\nimport android.util.Log\r\nimport android.widget.RemoteViews\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.core.app.NotificationManagerCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Date\r\nimport java.util.Locale\r\nimport java.util.Timer\r\nimport java.util.TimerTask\r\n\r\nclass APICallService : Service() {\r\n\r\n    private val timer = Timer()\r\n    private val apiCallInterval: Long = 20 * 1000\r\n    private var title = \"\"\r\n    private var message = \"\"\r\n\r\n    override fun onBind(intent: Intent?): IBinder? {\r\n        return null\r\n    }\r\n\r\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        when(intent?.action){\r\n            Actions.START.toString() -> start()\r\n            Actions.STOP.toString() -> stopSelf()\r\n        }\r\n        return super.onStartCommand(intent, flags, startId)\r\n    }\r\n\r\n    private fun start(){\r\n        timer.scheduleAtFixedRate(object :TimerTask(){\r\n            override fun run() {\r\n\r\n                CoroutineScope(Dispatchers.IO).launch {\r\n\r\n                    val hardwareData = APIServices.fetchhardware()\r\n\r\n                    if (hardwareData != null) {\r\n                        hardwareData.setValues()\r\n\r\n                        when {\r\n                            (hardwareData.Circulation_Pump_Status.equals(\"False\")) -> {\r\n                                title = \"Equipment Warning\"\r\n                                message = \"ERROR: CIRCULATION PUMP OFFLINE\"\r\n                            }\r\n\r\n                            (hardwareData.Fan_Extractor_Status.equals(\"False\")) -> {\r\n                                title = \"Equipment Warning\"\r\n                                message = \"ERROR: EXTRACTOR FAN OFFLINE\"\r\n                            }\r\n\r\n                            (hardwareData.Fan_Tent_Status.equals(\"False\")) -> {\r\n                                title = \"Equipment Warning\"\r\n                                message = \"ERROR: CIRCULATION FAN OFFLINE\"\r\n                            }\r\n\r\n                            (hardwareData.Light_Status.equals(\"False\")) -> {\r\n                                title = \"Equipment Warning\"\r\n                                message = \"ERROR: LIGHT OFFLINE\"\r\n                            }\r\n\r\n                        }\r\n                    } else {\r\n                        title = \"System Warning\"\r\n                        message = \"ERROR: EQUIPMENT NOT FOUND\"\r\n                        Log.i(\"Check foreground  service\", \"hardware not found\")\r\n\r\n                        //writeToFirebase()\r\n                    }\r\n                }\r\n\r\n                        /*if (hardwareData.Circulation_Pump_Status.equals(\"False\") || hardwareData.Fan_Extractor_Status.equals(\"False\") || hardwareData.Fan_Tent_Status.equals(\"False\")\r\n                            || hardwareData.Light_Status.equals(\"False\")) {\r\n                            title = \"Equipment Warning\"\r\n                            message = \"ERROR: EQUIPMENT OFFLINE\"\r\n\r\n                            Log.i(\"Check bg service\", \"hardware not on\")\r\n                        }\r\n                    } else\r\n                        if (hardwareData == null) {\r\n                            title = \"hardware data is empty\"\r\n                            message = \"hardware data is empty\"\r\n                            Log.i(\"Check bg service\", \"hardware not found\")\r\n                        }*/\r\n\r\n                    if(title.isNotEmpty() && message.isNotEmpty())\r\n                    {\r\n                        var notification =  createNotification(title,message)\r\n                        startForeground(1,notification)\r\n                    }\r\n                }\r\n        },0,apiCallInterval)\r\n\r\n    }\r\n\r\n    fun writeToFirebase() {\r\n        val user = User(\r\n            UserID = UserID,\r\n            Username = UserName\r\n        )\r\n\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            // Check if the user is signed in\r\n            val currentUser = FirebaseUtils.Get(user)\r\n            if (currentUser != null) {\r\n                // Create a NotificationDataClass object for the notification\r\n                val notificationData = NotificationDataClass()\r\n                notificationData.notificationType = \"System Warning\"\r\n\r\n                notificationData.notificationMessage = \"ERROR: EQUIPMENT NOT FOUND\"\r\n\r\n                val sdf = SimpleDateFormat(\"HH:mm:ss\", Locale.getDefault())\r\n                val timestamp = sdf.format(Date()) // Format the current time\r\n                notificationData.timestamp = timestamp\r\n\r\n                // Get the User object for the currently signed-in user\r\n                val user = User(UserID, UserName)\r\n\r\n                // Insert the notification for the user\r\n                val isInserted = NotificationDataClass.insertNotificationForUser(\r\n                    user,\r\n                    notificationData\r\n                )\r\n\r\n                if (isInserted) {\r\n                    Log.i(\"Notification Insert\", \"Notification inserted successfully\")\r\n                } else {\r\n                    Log.e(\"Notification Insert\", \"Failed to insert notification\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        timer.cancel()\r\n    }\r\n\r\n    enum class Actions{\r\n        START,STOP\r\n    }\r\n    private fun createNotification(title: String, message: String): Notification? {\r\n\r\n        //Confirm usage of intent\r\n\r\n        /*val intent = Intent(applicationContext, GoogleLogin::class.java)\r\n        val pendingIntent = PendingIntent.getActivity(\r\n            applicationContext,\r\n            0,\r\n            intent,\r\n            PendingIntent.FLAG_IMMUTABLE\r\n        )*/\r\n\r\n        val color = ContextCompat.getColor(applicationContext,R.color.red)\r\n\r\n        val notification = NotificationCompat.Builder(applicationContext, \"Channel_id\")\r\n            .setContentTitle(title)\r\n            .setContentText(message)\r\n            .setOngoing(false)\r\n            .setColorized(true)\r\n            .setColor(color)\r\n            .setSmallIcon(R.drawable.ic_notification_danger)\r\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT)\r\n            .build()\r\n\r\n        val notificationManager = NotificationManagerCompat.from(applicationContext)\r\n        if (ActivityCompat.checkSelfPermission(\r\n                this,\r\n                android.Manifest.permission.POST_NOTIFICATIONS\r\n            ) == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            notificationManager.notify(1, notification)\r\n        }\r\n        return notification\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/opsc7312part1/APICallService.kt b/app/src/main/java/com/example/opsc7312part1/APICallService.kt
--- a/app/src/main/java/com/example/opsc7312part1/APICallService.kt	(revision ff4dc3e9a42f79711805f3993648e317cf55a4c4)
+++ b/app/src/main/java/com/example/opsc7312part1/APICallService.kt	(date 1697482454621)
@@ -87,7 +87,7 @@
                         message = "ERROR: EQUIPMENT NOT FOUND"
                         Log.i("Check foreground  service", "hardware not found")
 
-                        //writeToFirebase()
+                        writeToFirebase()
                     }
                 }
 
